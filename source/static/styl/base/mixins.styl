//============== MIXINS ==============//
clearfix()
  &:before
  &:after
    content ''
    display table
    clear both

anim()
  transition all 0.3s cubic-bezier(.33,.66,.66,1)

trs(animation)
  transition animation 0.3s cubic-bezier(.33,.66,.66,1)

smooth()
  -webkit-transform translate3d(0, 0, 0)
  -webkit-backface-visibility hidden
  -webkit-perspective 1000

pseudo-dark-bg(opacity)
  &:after
    anim()
    opacity 0
    content ''
    position absolute
    left 0
    top 0
    width 100%
    height 100%
    background rgba(0,0,0,opacity)
  &:hover:after
    opacity 1

bg(image)
  background url(image) no-repeat 50%
  background-size cover

size(wh)
  width wh
  height wh

user-select-none()
  -webkit-touch-callout none
  -khtml-user-select none
  user-select none

trfrotate(degrees)
  transform rotate(degrees)

trftranslate(x, y)
  transform translate(x y)

retina(a, b)
  background-image url(a)
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2)
    background-image url(b)
    background-size $sprite

//
// TRIANGLE
// ========
// https://github.com/jackbrewer/stylus-mixins/blob/master/docs/triangle.md
triangle($point = 'up', $size = 1em, $color = #777)

  if $size is a 'unit' && $color is a 'color'

    if $point == 'up'
      _triangle-borders({top: '', right: transparent, bottom: solid, left: transparent}, $size, $color)
    else if $point == 'right'
      _triangle-borders({top: transparent, right: '', bottom: transparent, left: solid}, $size, $color)
    else if $point == 'down'
      _triangle-borders({top: solid, right: transparent, bottom: '', left: transparent}, $size, $color)
    else if $point == 'left'
      _triangle-borders({top: transparent, right: solid, bottom: transparent, left: ''}, $size, $color)
    else if $point == 'up-left'
      $size = ($size / 2)
      _triangle-borders({top: solid, right: transparent, bottom: transparent, left: solid}, $size, $color)
    else if $point == 'up-right'
      $size = ($size / 2)
      _triangle-borders({top: solid, right: solid, bottom: transparent, left: transparent}, $size, $color)
    else if $point == 'down-right'
      $size = ($size / 2)
      _triangle-borders({top: transparent, right: solid, bottom: solid, left: transparent}, $size, $color)
    else if $point == 'down-left'
      $size = ($size / 2)
      _triangle-borders({top: transparent, right: transparent, bottom: solid, left: solid}, $size, $color)


//
// TRIANGLE BORDERS
// This mixin should not be called directly
//

_triangle-borders($sides, $size, $color)

  width 0
  height 0

  for $side, $style in $sides
    if $style == solid
      border-{$side} $size solid $color
    else if $style == transparent
      border-{$side} $size solid transparent



