$(function() {    $('a[href="#"]').click(function(e){ e.preventDefault(); });    // IE10 хак для Surface/desktop Windows 8 бага    (function () {      'use strict';      if (navigator.userAgent.match(/IEMobile\/10\.0/)) {        var msViewportStyle = document.createElement('style')        msViewportStyle.appendChild(          document.createTextNode(            '@-ms-viewport{width:auto!important}'          )        )        document.querySelector('head').appendChild(msViewportStyle)      }    })();    // Автоматическое увеличение высоты textarea    autosize($('textarea'));    // Кастомный селект    $('select').select2({      minimumResultsForSearch: Infinity    });    // Маски для инпутов    function inputMask() {      $(".mask-date").mask("99.99.9999",{placeholder:"__.__.____"});      $(".mask-year").mask("9999",{placeholder:""});      $(".mask-tel").mask("+7 (999) 999-99-99",{placeholder:"X"});    };    inputMask();    function sidebarFilters() {      var sliderFormat = document.getElementById('sidebar-slider-format');      var input0 = document.getElementById('sidebar-input-start');      var input1 = document.getElementById('sidebar-input-finish');      var inputs = [input0, input1];      var min = 200000;      var max = 20000000;      noUiSlider.create(sliderFormat, {        start: [ 200000, 20000000 ],        step: 10000,        connect: true,        range: {          'min': [ min ],          'max': [ max ]        },        pips: {          mode: 'values',          values: [min, max],          density: 100,          format: wNumb({            decimals: 0,            thousand: ' ',            postfix: ' руб.',          })        },        format: wNumb({          decimals: 0,          thousand: ' ',          postfix: '',        })      });      sliderFormat.noUiSlider.on('update', function( values, handle ) {        inputs[handle].value = values[handle];      });      function setSliderHandle(i, value) {        var r = [null,null];        r[i] = value;        sliderFormat.noUiSlider.set(r);      }      // Listen to keydown events on the input field.      inputs.forEach(function(input, handle) {        input.addEventListener('change', function(){          setSliderHandle(handle, this.value);        });        input.addEventListener('keydown', function( e ) {          var values = sliderFormat.noUiSlider.get();          var value = Number(values[handle]);          // [[handle0_down, handle0_up], [handle1_down, handle1_up]]          var steps = sliderFormat.noUiSlider.steps();          // [down, up]          var step = steps[handle];          var position;          // 13 is enter,          // 38 is key up,          // 40 is key down.          switch ( e.which ) {            case 13:              setSliderHandle(handle, this.value);              break;            case 38:              // Get step to go increase slider value (up)              position = step[1];              // false = no step is set              if ( position === false ) {                position = 1;              }              // null = edge of slider              if ( position !== null ) {                setSliderHandle(handle, value + position);              }              break;            case 40:              position = step[0];              if ( position === false ) {                position = 1;              }              if ( position !== null ) {                setSliderHandle(handle, value - position);              }              break;          }        });      });      $('.price-inputs input').keypress(function (e) {        if (e.which == 13) {          return false;        }      });      $(".price-inputs input").on("click", function () {        $(this).select();      });    };    if ( $('.m_find-project').length ) {      sidebarFilters();    }
    function mobileMenu() {      var $bgLayout = $('.bg-layout');      var $mobileMenuButton = $('.mobile-menu');      var $bottomHeader = $('.bottom-header');      $mobileMenuButton.on('click', function(){        $bottomHeader.toggleClass('is-opened');        $bgLayout.toggleClass('is-active');      });      $bgLayout.on('click', function(){        $bottomHeader.removeClass('is-opened');        $bgLayout.removeClass('is-active');      });    }    mobileMenu();    function mobileMenuAccordion() {      $('.dropdown-menu').on('click', function(){        if ( $(this).hasClass('is-active') ) {          $(this).removeClass('is-active');          return false;        } else {          $('.dropdown-menu').removeClass('is-active');          $(this).addClass('is-active');          return false;        }      });    }    mobileMenuAccordion();
    console.log('Layout generated');
    function carouselFill() {      $('.lead-carousel .image').imagefill({        throttle:1000/60      });      setTimeout(function(){        $('.lead-carousel .slide').css('opacity', '1');      }, 300);    }    function leadCarousel() {      var $leadCarousel = $('.lead-carousel');      $leadCarousel.on('init', function(){        carouselFill();      });      $leadCarousel.slick({        dots: false,        arrows: false,        infinite: false        // fade: true      })    };    leadCarousel();
    if ( $('.m_lead-map').length ) {      ymaps.ready(function () {        var myMap = new ymaps.Map('map', {          center: [55.751574, 37.522856],          zoom: 13,          controls: ['zoomControl']        }, {          searchControlProvider: 'yandex#search'        }),        myPlacemark = new ymaps.Placemark(myMap.getCenter(), {          hintContent: '',          balloonContent: ''        }, {          iconLayout: 'default#image',          iconImageHref: 'images/marker.png',          iconImageSize: [42, 56],          iconImageOffset: [-22, -56]        });        myMap.geoObjects.add(myPlacemark);        myMap.behaviors.disable('scrollZoom');      });    }});